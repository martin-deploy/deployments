apiVersion: v1
kind: ConfigMap
metadata:
  name: martin-templater-argo-cd-plugin
data:
  plugin:
    # While the ConfigManagementPlugin looks like a Kubernetes object, it is not actually a custom resource. It only follows kubernetes-style spec conventions.
    # Argo CD expects the plugin configuration file to be located at /home/argocd/cmp-server/config/plugin.yaml in the sidecar.
    apiVersion: argoproj.io/v1alpha1
    kind: ConfigManagementPlugin
    metadata:
      name: martin-templater # The name of the plugin must be unique within a given Argo CD instance.
    spec:
      version: 0.1.0

      # The init command runs in the Application source directory at the beginning of each manifest generation. The init
      # command can output anything. A non-zero status code will fail manifest generation.
      init:
        # Init always happens immediately before generate, but its output is not treated as manifests.
        # This is a good place to, for example, download chart dependencies.
        command: [ash]
        args: [-c, npm install]

      # The generate command runs in the Application source directory each time manifests are generated. Standard output
      # must be ONLY valid YAML manifests. A non-zero exit code will fail manifest generation.
      # Error output will be sent to the UI, so avoid printing sensitive information (such as secrets).
      generate:
        command: [ash]
        args: # [-c, ts-node .]
          - -c
          - |-
            echo "{\"kind\": \"ConfigMap\", \"apiVersion\": \"v1\", \"metadata\": { \"name\": \"$ARGOCD_APP_NAME\", \"namespace\": \"$ARGOCD_APP_NAMESPACE\", \"annotations\": {\"PWD\": \"$(pwd)\", \"KubeVersion\": \"$KUBE_VERSION\", \"KubeApiVersion\": \"$KUBE_API_VERSIONS\",\"Bar\": \"baz\"}}}"

      # The parameters config describes what parameters the UI should display for an Application. It is up to the user to
      # actually set parameters in the Application manifest (in spec.source.plugin.parameters). The announcements _only_
      # inform the "Parameters" tab in the App Details page of the UI.
      parameters:
        # Static parameter announcements are sent to the UI for _all_ Applications handled by this plugin.
        # Think of the `string`, `array`, and `map` values set here as "defaults". It is up to the plugin author to make
        # sure that these default values actually reflect the plugin's behavior if the user doesn't explicitly set different
        # values for those parameters.
        static:
          - name: string-param
            title: Description of the string param
            tooltip: Tooltip shown when the user hovers the
            # If this field is set, the UI will indicate to the user that they must set the value.
            required: false
            # itemType tells the UI how to present the parameter's value (or, for arrays and maps, values). Default is
            # "string". Examples of other types which may be supported in the future are "boolean" or "number".
            # Even if the itemType is not "string", the parameter value from the Application spec will be sent to the plugin
            # as a string. It's up to the plugin to do the appropriate conversion.
            itemType: ""
            # collectionType describes what type of value this parameter accepts (string, array, or map) and allows the UI
            # to present a form to match that type. Default is "string". This field must be present for non-string types.
            # It will not be inferred from the presence of an `array` or `map` field.
            collectionType: ""
            # This field communicates the parameter's default value to the UI. Setting this field is optional.
            string: default-string-value
          # All the fields above besides "string" apply to both the array and map type parameter announcements.
          - name: array-param
            # This field communicates the parameter's default value to the UI. Setting this field is optional.
            array: [default, items]
            collectionType: array
          - name: map-param
            # This field communicates the parameter's default value to the UI. Setting this field is optional.
            map:
              some: value
            collectionType: map
        # Dynamic parameter announcements are announcements specific to an Application handled by this plugin. For example,
        # the values for a Helm chart's values.yaml file could be sent as parameter announcements.
        dynamic:
          # The command is run in an Application's source directory. Standard output must be JSON matching the schema of the
          # static parameter announcements list.
          command: [echo, '[{"name": "example-param", "string": "default-string-value"}]']

        # If set to then the plugin receives repository files with original file mode. Dangerous since the repository
        # might have executable files. Set to true only if you trust the CMP plugin authors.
        preserveFileMode: false

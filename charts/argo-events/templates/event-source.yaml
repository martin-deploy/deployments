# Info on GitHub Webhook: https://developer.github.com/v3/repos/hooks/#create-a-hook
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: github
spec:
  service:
    type: LoadBalancer
    ports:
      - name: martin
        port: 12000
        targetPort: 12000
  github:
    martin:
      repositories:
        - owner: martin-deploy
          names:
            - app-1
            - app-2-pipeline
            - app-2-deployment
            - app-2-dockerfile
            - app-2-code
            - pipelines
            - deployments
            - dockerfiles

      webhook: # Github will send events to following port and endpoint
        endpoint: /push # endpoint to listen to events on
        port: "12000" # port to run internal HTTP server on
        method: POST # HTTP request method to allow. In this case, only POST requests are accepted

        # url the event-source will use to register at Github.
        # This url must be reachable from outside the cluster.
        # The name for the service is in `<event-source-name>-eventsource-svc` format.
        # You will need to create an Ingress or Openshift Route for the event-source service so that it can be reached from GitHub.
        url: http://url-that-is-reachable-from-GitHub

      # type of events to listen to.
      # following listens to everything, hence *
      # You can find more info on https://developer.github.com/v3/activity/events/types/ (404)
      events:
        - "*"

      # apiToken refers to K8s secret that stores the github api token
      # if apiToken is provided controller will create webhook on GitHub repo
      apiToken:
        name: martin-auth-webhook # Name of the K8s secret that contains the access token
        key: github-token # Key within the K8s secret whose corresponding value (must be base64 encoded) is access token

      insecure: true
      active: true # Determines if notifications are sent when the webhook is triggered
      contentType: json # The media type used to serialize the payloads

global:
  imagePullSecrets: [] # If defined, uses a Secret to pull an image from a private Docker registry or repository

argo-events:

  # Create clusterroles that extend existing clusterroles to interact with argo-events crds
  # Only applies for cluster-wide installation (`controller.rbac.namespaced: false`)
  # Ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles
  createAggregateRoles: true

  crds: # Custom resource configuration
    install: true # Install and upgrade CRDs
    keep: false # Keep CRDs on chart uninstall

  configs: # Event bus configuration
    jetstream: # JetStream event bus
      # Default JetStream settings, could be overridden by EventBus JetStream spec
      # Ref: https://docs.nats.io/running-a-nats-service/configuration#jetstream
      settings:
        maxMemoryStore: -1 # Maximum size of the memory storage (e.g. 1G)
        maxFileStore: -1 # Maximum size of the file storage (e.g. 20G)
      streamConfig:
        maxMsgs: 1000000 # Maximum number of messages before expiring oldest message
        maxAge: 72h # Maximum age of existing messages, i.e. “72h”, “4h35m”
        # Total size of messages before expiring oldest message, 0 means unlimited.
        maxBytes: 1GB
        replicas: 3 # Number of replicas, defaults to 3 and requires minimal 3
        duplicates: 300s # Not documented at the moment
      # Supported versions of JetStream eventbus
      versions:
        - version: "latest"
          natsImage: nats:latest
          metricsExporterImage: natsio/prometheus-nats-exporter:latest
          configReloaderImage: natsio/nats-server-config-reloader:latest
          startCommand: /nats-server

  controller: # Argo Events controller
    rbac:
      enabled: true # Create events controller RBAC
      namespaced: false # Restrict events controller to operate only in a single namespace instead of cluster-wide scope.

    replicas: 1 # The number of events controller pods to run.

    volumes: [] # Additional volumes to the events controller pod
    volumeMounts: [] # Additional volumeMounts to the events controller main container

    serviceAccount:
      create: true # Create a service account for the events controller
      automountServiceAccountToken: true # Automount API credentials for the Service Account

    metrics: # Events controller metrics configuration
      enabled: false

  webhook: # Argo Events admission webhook
    enabled: false

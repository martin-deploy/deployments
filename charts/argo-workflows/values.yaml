global:
  {}

argo-workflows:
  images:
    pullSecrets: [] # Secrets with credentials to pull images from a private registry
    # - name: argo-pull-secret

  crds: # Custom resource configuration
    install: true # Install and upgrade CRDs
    keep: false # Keep CRDs on chart uninstall

  # Create clusterroles that extend existing clusterroles to interact with argo-cd crds
  # Ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles
  createAggregateRoles: true

  # Restrict Argo to operate only in a single namespace (the namespace of the
  # Helm release) by apply Roles and RoleBindings instead of the Cluster
  # equivalents, and start workflow-controller with the --namespaced flag. Use it
  # in clusters with strict access policy.
  singleNamespace: false

  workflow:
    serviceAccount:
      create: true

    rbac:
      # Adds Role and RoleBinding for the above specified service account to be able to run workflows.
      # A Role and Rolebinding pair is also created for each namespace in controller.workflowNamespaces (see below)
      create: true

  controller:
    metricsConfig:
      enabled: false

    # Default values that will apply to all Workflows from this controller, unless overridden on the Workflow-level.
    # See more: https://argoproj.github.io/argo-workflows/default-workflow-specs/
    workflowDefaults:
      {}
      # spec:
      #   ttlStrategy:
      #     secondsAfterCompletion: 84600

    # telemetryConfig controls the path and port for prometheus telemetry. Telemetry is enabled and emitted in the same endpoint
    # as metrics by default, but can be overridden using this config.
    telemetryConfig:
      enabled: false

    serviceMonitor:
      enabled: false # Enable a prometheus ServiceMonitor

    serviceAccount:
      create: true # Create a service account for the controller

    # Specify all namespaces where this workflow controller instance will manage
    # workflows. This controls where the service account and RBAC resources will
    # be created. Only valid when singleNamespace is false.
    workflowNamespaces:
      - argo-workflows

    instanceID:
      # Configures the controller to filter workflow submissions
      # to only those which have a matching instanceID attribute.
      # NOTE: If `instanceID.enabled` is set to `true` then either `instanceID.userReleaseName`
      # or `instanceID.explicitID` must be defined.
      enabled: false

    clusterWorkflowTemplates:
      enabled: true # Create a ClusterRole and CRB for the controller to access ClusterWorkflowTemplates.

    retentionPolicy: # Workflow retention by number of workflows
      completed: 6
      failed: 2
      errored: 2

    nodeEvents:
      # Enable to emit events on node completion.
      # This can take up a lot of space in k8s (typically etcd) resulting in errors when trying to create new events:
      # "Unable to create audit event: etcdserver: mvcc: database space exceeded"
      enabled: false

  server:
    enabled: true # Deploy the Argo Server

    rbac:
      create: true # Adds Role and RoleBinding for the server.

    serviceAccount:
      create: true

    autoscaling:
      enabled: false # Enable Horizontal Pod Autoscaler ([HPA]) for the Argo Server

    # Run the argo server in "secure" mode. Configure this value instead of `--secure` in extraArgs.
    # See the following documentation for more details on secure mode:
    # https://argoproj.github.io/argo-workflows/tls/
    secure: false

    serviceType: LoadBalancer

    ingress: # Ingress configuration: https://kubernetes.io/docs/user-guide/ingress/
      enabled: false
      ingressClassName: "" # Defines which ingress controller will implement the resource

      # List of ingress hosts
      # Hostnames must be provided if Ingress is enabled.
      # Secrets must be manually created in the namespace
      hosts:
        []
        # - argoworkflows.example.com

      tls:
        [] # Ingress TLS configuration
        # - secretName: argoworkflows-example-tls
        #   hosts:
        #     - argoworkflows.example.com

    clusterWorkflowTemplates:
      enabled: true # Create a ClusterRole and CRB for the server to access ClusterWorkflowTemplates.
      enableEditing: true # Give the server permissions to edit ClusterWorkflowTemplates.
